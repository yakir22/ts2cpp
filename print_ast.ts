import {readFileSync} from "fs";
import * as ts from "typescript";

export function delint(sourceFile: ts.SourceFile) {
	let depth : number = -1;
    delintNode(sourceFile);
    function delintNode(node: ts.Node) {
		depth++;
        switch (node.kind) {
			case ts.SyntaxKind.Unknown : console.log(depth +"-" +"Unknown: " + node.getText()); break;
			case ts.SyntaxKind.EndOfFileToken : console.log(depth +"-" +"EndOfFileToken: " + node.getText()); break;
			case ts.SyntaxKind.SingleLineCommentTrivia : console.log(depth +"-" +"SingleLineCommentTrivia: " + node.getText()); break;
			case ts.SyntaxKind.MultiLineCommentTrivia : console.log(depth +"-" +"MultiLineCommentTrivia: " + node.getText()); break;
			case ts.SyntaxKind.NewLineTrivia : console.log(depth +"-" +"NewLineTrivia: " + node.getText()); break;
			case ts.SyntaxKind.WhitespaceTrivia : console.log(depth +"-" +"WhitespaceTrivia: " + node.getText()); break;
			case ts.SyntaxKind.ShebangTrivia : console.log(depth +"-" +"ShebangTrivia: " + node.getText()); break;
			case ts.SyntaxKind.ConflictMarkerTrivia : console.log(depth +"-" +"ConflictMarkerTrivia: " + node.getText()); break;
			case ts.SyntaxKind.NumericLiteral : console.log(depth +"-" +"NumericLiteral: " + node.getText()); break;
			case ts.SyntaxKind.StringLiteral : console.log(depth +"-" +"StringLiteral: " + node.getText()); break;
			case ts.SyntaxKind.JsxText : console.log(depth +"-" +"JsxText: " + node.getText()); break;
			case ts.SyntaxKind.JsxTextAllWhiteSpaces : console.log(depth +"-" +"JsxTextAllWhiteSpaces: " + node.getText()); break;
			case ts.SyntaxKind.RegularExpressionLiteral : console.log(depth +"-" +"RegularExpressionLiteral: " + node.getText()); break;
			case ts.SyntaxKind.NoSubstitutionTemplateLiteral : console.log(depth +"-" +"NoSubstitutionTemplateLiteral: " + node.getText()); break;
			case ts.SyntaxKind.TemplateHead : console.log(depth +"-" +"TemplateHead: " + node.getText()); break;
			case ts.SyntaxKind.TemplateMiddle : console.log(depth +"-" +"TemplateMiddle: " + node.getText()); break;
			case ts.SyntaxKind.TemplateTail : console.log(depth +"-" +"TemplateTail: " + node.getText()); break;
			case ts.SyntaxKind.OpenBraceToken : console.log(depth +"-" +"OpenBraceToken: " + node.getText()); break;
			case ts.SyntaxKind.CloseBraceToken : console.log(depth +"-" +"CloseBraceToken: " + node.getText()); break;
			case ts.SyntaxKind.OpenParenToken : console.log(depth +"-" +"OpenParenToken: " + node.getText()); break;
			case ts.SyntaxKind.CloseParenToken : console.log(depth +"-" +"CloseParenToken: " + node.getText()); break;
			case ts.SyntaxKind.OpenBracketToken : console.log(depth +"-" +"OpenBracketToken: " + node.getText()); break;
			case ts.SyntaxKind.CloseBracketToken : console.log(depth +"-" +"CloseBracketToken: " + node.getText()); break;
			case ts.SyntaxKind.DotToken : console.log(depth +"-" +"DotToken: " + node.getText()); break;
			case ts.SyntaxKind.DotDotDotToken : console.log(depth +"-" +"DotDotDotToken: " + node.getText()); break;
			case ts.SyntaxKind.SemicolonToken : console.log(depth +"-" +"SemicolonToken: " + node.getText()); break;
			case ts.SyntaxKind.CommaToken : console.log(depth +"-" +"CommaToken: " + node.getText()); break;
			case ts.SyntaxKind.LessThanToken : console.log(depth +"-" +"LessThanToken: " + node.getText()); break;
			case ts.SyntaxKind.LessThanSlashToken : console.log(depth +"-" +"LessThanSlashToken: " + node.getText()); break;
			case ts.SyntaxKind.GreaterThanToken : console.log(depth +"-" +"GreaterThanToken: " + node.getText()); break;
			case ts.SyntaxKind.LessThanEqualsToken : console.log(depth +"-" +"LessThanEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.GreaterThanEqualsToken : console.log(depth +"-" +"GreaterThanEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.EqualsEqualsToken : console.log(depth +"-" +"EqualsEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.ExclamationEqualsToken : console.log(depth +"-" +"ExclamationEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.EqualsEqualsEqualsToken : console.log(depth +"-" +"EqualsEqualsEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.ExclamationEqualsEqualsToken : console.log(depth +"-" +"ExclamationEqualsEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.EqualsGreaterThanToken : console.log(depth +"-" +"EqualsGreaterThanToken: " + node.getText()); break;
			case ts.SyntaxKind.PlusToken : console.log(depth +"-" +"PlusToken: " + node.getText()); break;
			case ts.SyntaxKind.MinusToken : console.log(depth +"-" +"MinusToken: " + node.getText()); break;
			case ts.SyntaxKind.AsteriskToken : console.log(depth +"-" +"AsteriskToken: " + node.getText()); break;
			case ts.SyntaxKind.AsteriskAsteriskToken : console.log(depth +"-" +"AsteriskAsteriskToken: " + node.getText()); break;
			case ts.SyntaxKind.SlashToken : console.log(depth +"-" +"SlashToken: " + node.getText()); break;
			case ts.SyntaxKind.PercentToken : console.log(depth +"-" +"PercentToken: " + node.getText()); break;
			case ts.SyntaxKind.PlusPlusToken : console.log(depth +"-" +"PlusPlusToken: " + node.getText()); break;
			case ts.SyntaxKind.MinusMinusToken : console.log(depth +"-" +"MinusMinusToken: " + node.getText()); break;
			case ts.SyntaxKind.LessThanLessThanToken : console.log(depth +"-" +"LessThanLessThanToken: " + node.getText()); break;
			case ts.SyntaxKind.GreaterThanGreaterThanToken : console.log(depth +"-" +"GreaterThanGreaterThanToken: " + node.getText()); break;
			case ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken : console.log(depth +"-" +"GreaterThanGreaterThanGreaterThanToken: " + node.getText()); break;
			case ts.SyntaxKind.AmpersandToken : console.log(depth +"-" +"AmpersandToken: " + node.getText()); break;
			case ts.SyntaxKind.BarToken : console.log(depth +"-" +"BarToken: " + node.getText()); break;
			case ts.SyntaxKind.CaretToken : console.log(depth +"-" +"CaretToken: " + node.getText()); break;
			case ts.SyntaxKind.ExclamationToken : console.log(depth +"-" +"ExclamationToken: " + node.getText()); break;
			case ts.SyntaxKind.TildeToken : console.log(depth +"-" +"TildeToken: " + node.getText()); break;
			case ts.SyntaxKind.AmpersandAmpersandToken : console.log(depth +"-" +"AmpersandAmpersandToken: " + node.getText()); break;
			case ts.SyntaxKind.BarBarToken : console.log(depth +"-" +"BarBarToken: " + node.getText()); break;
			case ts.SyntaxKind.QuestionToken : console.log(depth +"-" +"QuestionToken: " + node.getText()); break;
			case ts.SyntaxKind.ColonToken : console.log(depth +"-" +"ColonToken: " + node.getText()); break;
			case ts.SyntaxKind.AtToken : console.log(depth +"-" +"AtToken: " + node.getText()); break;
			case ts.SyntaxKind.EqualsToken : console.log(depth +"-" +"EqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.PlusEqualsToken : console.log(depth +"-" +"PlusEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.MinusEqualsToken : console.log(depth +"-" +"MinusEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.AsteriskEqualsToken : console.log(depth +"-" +"AsteriskEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.AsteriskAsteriskEqualsToken : console.log(depth +"-" +"AsteriskAsteriskEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.SlashEqualsToken : console.log(depth +"-" +"SlashEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.PercentEqualsToken : console.log(depth +"-" +"PercentEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.LessThanLessThanEqualsToken : console.log(depth +"-" +"LessThanLessThanEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.GreaterThanGreaterThanEqualsToken : console.log(depth +"-" +"GreaterThanGreaterThanEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken : console.log(depth +"-" +"GreaterThanGreaterThanGreaterThanEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.AmpersandEqualsToken : console.log(depth +"-" +"AmpersandEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.BarEqualsToken : console.log(depth +"-" +"BarEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.CaretEqualsToken : console.log(depth +"-" +"CaretEqualsToken: " + node.getText()); break;
			case ts.SyntaxKind.Identifier : console.log(depth +"-" +"Identifier: " + node.getText()); break;
			case ts.SyntaxKind.BreakKeyword : console.log(depth +"-" +"BreakKeyword: " + node.getText()); break;
			case ts.SyntaxKind.CaseKeyword : console.log(depth +"-" +"CaseKeyword: " + node.getText()); break;
			case ts.SyntaxKind.CatchKeyword : console.log(depth +"-" +"CatchKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ClassKeyword : console.log(depth +"-" +"ClassKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ConstKeyword : console.log(depth +"-" +"ConstKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ContinueKeyword : console.log(depth +"-" +"ContinueKeyword: " + node.getText()); break;
			case ts.SyntaxKind.DebuggerKeyword : console.log(depth +"-" +"DebuggerKeyword: " + node.getText()); break;
			case ts.SyntaxKind.DefaultKeyword : console.log(depth +"-" +"DefaultKeyword: " + node.getText()); break;
			case ts.SyntaxKind.DeleteKeyword : console.log(depth +"-" +"DeleteKeyword: " + node.getText()); break;
			case ts.SyntaxKind.DoKeyword : console.log(depth +"-" +"DoKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ElseKeyword : console.log(depth +"-" +"ElseKeyword: " + node.getText()); break;
			case ts.SyntaxKind.EnumKeyword : console.log(depth +"-" +"EnumKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ExportKeyword : console.log(depth +"-" +"ExportKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ExtendsKeyword : console.log(depth +"-" +"ExtendsKeyword: " + node.getText()); break;
			case ts.SyntaxKind.FalseKeyword : console.log(depth +"-" +"FalseKeyword: " + node.getText()); break;
			case ts.SyntaxKind.FinallyKeyword : console.log(depth +"-" +"FinallyKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ForKeyword : console.log(depth +"-" +"ForKeyword: " + node.getText()); break;
			case ts.SyntaxKind.FunctionKeyword : console.log(depth +"-" +"FunctionKeyword: " + node.getText()); break;
			case ts.SyntaxKind.IfKeyword : console.log(depth +"-" +"IfKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ImportKeyword : console.log(depth +"-" +"ImportKeyword: " + node.getText()); break;
			case ts.SyntaxKind.InKeyword : console.log(depth +"-" +"InKeyword: " + node.getText()); break;
			case ts.SyntaxKind.InstanceOfKeyword : console.log(depth +"-" +"InstanceOfKeyword: " + node.getText()); break;
			case ts.SyntaxKind.NewKeyword : console.log(depth +"-" +"NewKeyword: " + node.getText()); break;
			case ts.SyntaxKind.NullKeyword : console.log(depth +"-" +"NullKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ReturnKeyword : console.log(depth +"-" +"ReturnKeyword: " + node.getText()); break;
			case ts.SyntaxKind.SuperKeyword : console.log(depth +"-" +"SuperKeyword: " + node.getText()); break;
			case ts.SyntaxKind.SwitchKeyword : console.log(depth +"-" +"SwitchKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ThisKeyword : console.log(depth +"-" +"ThisKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ThrowKeyword : console.log(depth +"-" +"ThrowKeyword: " + node.getText()); break;
			case ts.SyntaxKind.TrueKeyword : console.log(depth +"-" +"TrueKeyword: " + node.getText()); break;
			case ts.SyntaxKind.TryKeyword : console.log(depth +"-" +"TryKeyword: " + node.getText()); break;
			case ts.SyntaxKind.TypeOfKeyword : console.log(depth +"-" +"TypeOfKeyword: " + node.getText()); break;
			case ts.SyntaxKind.VarKeyword : console.log(depth +"-" +"VarKeyword: " + node.getText()); break;
			case ts.SyntaxKind.VoidKeyword : console.log(depth +"-" +"VoidKeyword: " + node.getText()); break;
			case ts.SyntaxKind.WhileKeyword : console.log(depth +"-" +"WhileKeyword: " + node.getText()); break;
			case ts.SyntaxKind.WithKeyword : console.log(depth +"-" +"WithKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ImplementsKeyword : console.log(depth +"-" +"ImplementsKeyword: " + node.getText()); break;
			case ts.SyntaxKind.InterfaceKeyword : console.log(depth +"-" +"InterfaceKeyword: " + node.getText()); break;
			case ts.SyntaxKind.LetKeyword : console.log(depth +"-" +"LetKeyword: " + node.getText()); break;
			case ts.SyntaxKind.PackageKeyword : console.log(depth +"-" +"PackageKeyword: " + node.getText()); break;
			case ts.SyntaxKind.PrivateKeyword : console.log(depth +"-" +"PrivateKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ProtectedKeyword : console.log(depth +"-" +"ProtectedKeyword: " + node.getText()); break;
			case ts.SyntaxKind.PublicKeyword : console.log(depth +"-" +"PublicKeyword: " + node.getText()); break;
			case ts.SyntaxKind.StaticKeyword : console.log(depth +"-" +"StaticKeyword: " + node.getText()); break;
			case ts.SyntaxKind.YieldKeyword : console.log(depth +"-" +"YieldKeyword: " + node.getText()); break;
			case ts.SyntaxKind.AbstractKeyword : console.log(depth +"-" +"AbstractKeyword: " + node.getText()); break;
			case ts.SyntaxKind.AsKeyword : console.log(depth +"-" +"AsKeyword: " + node.getText()); break;
			case ts.SyntaxKind.AnyKeyword : console.log(depth +"-" +"AnyKeyword: " + node.getText()); break;
			case ts.SyntaxKind.AsyncKeyword : console.log(depth +"-" +"AsyncKeyword: " + node.getText()); break;
			case ts.SyntaxKind.AwaitKeyword : console.log(depth +"-" +"AwaitKeyword: " + node.getText()); break;
			case ts.SyntaxKind.BooleanKeyword : console.log(depth +"-" +"BooleanKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ConstructorKeyword : console.log(depth +"-" +"ConstructorKeyword: " + node.getText()); break;
			case ts.SyntaxKind.DeclareKeyword : console.log(depth +"-" +"DeclareKeyword: " + node.getText()); break;
			case ts.SyntaxKind.GetKeyword : console.log(depth +"-" +"GetKeyword: " + node.getText()); break;
			case ts.SyntaxKind.IsKeyword : console.log(depth +"-" +"IsKeyword: " + node.getText()); break;
			case ts.SyntaxKind.KeyOfKeyword : console.log(depth +"-" +"KeyOfKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ModuleKeyword : console.log(depth +"-" +"ModuleKeyword: " + node.getText()); break;
			case ts.SyntaxKind.NamespaceKeyword : console.log(depth +"-" +"NamespaceKeyword: " + node.getText()); break;
			case ts.SyntaxKind.NeverKeyword : console.log(depth +"-" +"NeverKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ReadonlyKeyword : console.log(depth +"-" +"ReadonlyKeyword: " + node.getText()); break;
			case ts.SyntaxKind.RequireKeyword : console.log(depth +"-" +"RequireKeyword: " + node.getText()); break;
			case ts.SyntaxKind.NumberKeyword : console.log(depth +"-" +"NumberKeyword: " + node.getText()); break;
			case ts.SyntaxKind.ObjectKeyword : console.log(depth +"-" +"ObjectKeyword: " + node.getText()); break;
			case ts.SyntaxKind.SetKeyword : console.log(depth +"-" +"SetKeyword: " + node.getText()); break;
			case ts.SyntaxKind.StringKeyword : console.log(depth +"-" +"StringKeyword: " + node.getText()); break;
			case ts.SyntaxKind.SymbolKeyword : console.log(depth +"-" +"SymbolKeyword: " + node.getText()); break;
			case ts.SyntaxKind.TypeKeyword : console.log(depth +"-" +"TypeKeyword: " + node.getText()); break;
			case ts.SyntaxKind.UndefinedKeyword : console.log(depth +"-" +"UndefinedKeyword: " + node.getText()); break;
			case ts.SyntaxKind.UniqueKeyword : console.log(depth +"-" +"UniqueKeyword: " + node.getText()); break;
			case ts.SyntaxKind.FromKeyword : console.log(depth +"-" +"FromKeyword: " + node.getText()); break;
			case ts.SyntaxKind.GlobalKeyword : console.log(depth +"-" +"GlobalKeyword: " + node.getText()); break;
			case ts.SyntaxKind.OfKeyword : console.log(depth +"-" +"OfKeyword: " + node.getText()); break;
			case ts.SyntaxKind.QualifiedName : console.log(depth +"-" +"QualifiedName: " + node.getText()); break;
			case ts.SyntaxKind.ComputedPropertyName : console.log(depth +"-" +"ComputedPropertyName: " + node.getText()); break;
			case ts.SyntaxKind.TypeParameter : console.log(depth +"-" +"TypeParameter: " + node.getText()); break;
			case ts.SyntaxKind.Parameter : console.log(depth +"-" +"Parameter: " + node.getText()); break;
			case ts.SyntaxKind.Decorator : console.log(depth +"-" +"Decorator: " + node.getText()); break;
			case ts.SyntaxKind.PropertySignature : console.log(depth +"-" +"PropertySignature: " + node.getText()); break;
			case ts.SyntaxKind.PropertyDeclaration : console.log(depth +"-" +"PropertyDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.MethodSignature : console.log(depth +"-" +"MethodSignature: " + node.getText()); break;
			case ts.SyntaxKind.MethodDeclaration : console.log(depth +"-" +"MethodDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.Constructor : console.log(depth +"-" +"Constructor: " + node.getText()); break;
			case ts.SyntaxKind.GetAccessor : console.log(depth +"-" +"GetAccessor: " + node.getText()); break;
			case ts.SyntaxKind.SetAccessor : console.log(depth +"-" +"SetAccessor: " + node.getText()); break;
			case ts.SyntaxKind.CallSignature : console.log(depth +"-" +"CallSignature: " + node.getText()); break;
			case ts.SyntaxKind.ConstructSignature : console.log(depth +"-" +"ConstructSignature: " + node.getText()); break;
			case ts.SyntaxKind.IndexSignature : console.log(depth +"-" +"IndexSignature: " + node.getText()); break;
			case ts.SyntaxKind.TypePredicate : console.log(depth +"-" +"TypePredicate: " + node.getText()); break;
			case ts.SyntaxKind.TypeReference : console.log(depth +"-" +"TypeReference: " + node.getText()); break;
			case ts.SyntaxKind.FunctionType : console.log(depth +"-" +"FunctionType: " + node.getText()); break;
			case ts.SyntaxKind.ConstructorType : console.log(depth +"-" +"ConstructorType: " + node.getText()); break;
			case ts.SyntaxKind.TypeQuery : console.log(depth +"-" +"TypeQuery: " + node.getText()); break;
			case ts.SyntaxKind.TypeLiteral : console.log(depth +"-" +"TypeLiteral: " + node.getText()); break;
			case ts.SyntaxKind.ArrayType : console.log(depth +"-" +"ArrayType: " + node.getText()); break;
			case ts.SyntaxKind.TupleType : console.log(depth +"-" +"TupleType: " + node.getText()); break;
			case ts.SyntaxKind.UnionType : console.log(depth +"-" +"UnionType: " + node.getText()); break;
			case ts.SyntaxKind.IntersectionType : console.log(depth +"-" +"IntersectionType: " + node.getText()); break;
			case ts.SyntaxKind.ParenthesizedType : console.log(depth +"-" +"ParenthesizedType: " + node.getText()); break;
			case ts.SyntaxKind.ThisType : console.log(depth +"-" +"ThisType: " + node.getText()); break;
			case ts.SyntaxKind.TypeOperator : console.log(depth +"-" +"TypeOperator: " + node.getText()); break;
			case ts.SyntaxKind.IndexedAccessType : console.log(depth +"-" +"IndexedAccessType: " + node.getText()); break;
			case ts.SyntaxKind.MappedType : console.log(depth +"-" +"MappedType: " + node.getText()); break;
			case ts.SyntaxKind.LiteralType : console.log(depth +"-" +"LiteralType: " + node.getText()); break;
			case ts.SyntaxKind.ObjectBindingPattern : console.log(depth +"-" +"ObjectBindingPattern: " + node.getText()); break;
			case ts.SyntaxKind.ArrayBindingPattern : console.log(depth +"-" +"ArrayBindingPattern: " + node.getText()); break;
			case ts.SyntaxKind.BindingElement : console.log(depth +"-" +"BindingElement: " + node.getText()); break;
			case ts.SyntaxKind.ArrayLiteralExpression : console.log(depth +"-" +"ArrayLiteralExpression: " + node.getText()); break;
			case ts.SyntaxKind.ObjectLiteralExpression : console.log(depth +"-" +"ObjectLiteralExpression: " + node.getText()); break;
			case ts.SyntaxKind.PropertyAccessExpression : console.log(depth +"-" +"PropertyAccessExpression: " + node.getText()); break;
			case ts.SyntaxKind.ElementAccessExpression : console.log(depth +"-" +"ElementAccessExpression: " + node.getText()); break;
			case ts.SyntaxKind.CallExpression : console.log(depth +"-" +"CallExpression: " + node.getText()); break;
			case ts.SyntaxKind.NewExpression : console.log(depth +"-" +"NewExpression: " + node.getText()); break;
			case ts.SyntaxKind.TaggedTemplateExpression : console.log(depth +"-" +"TaggedTemplateExpression: " + node.getText()); break;
			case ts.SyntaxKind.TypeAssertionExpression : console.log(depth +"-" +"TypeAssertionExpression: " + node.getText()); break;
			case ts.SyntaxKind.ParenthesizedExpression : console.log(depth +"-" +"ParenthesizedExpression: " + node.getText()); break;
			case ts.SyntaxKind.FunctionExpression : console.log(depth +"-" +"FunctionExpression: " + node.getText()); break;
			case ts.SyntaxKind.ArrowFunction : console.log(depth +"-" +"ArrowFunction: " + node.getText()); break;
			case ts.SyntaxKind.DeleteExpression : console.log(depth +"-" +"DeleteExpression: " + node.getText()); break;
			case ts.SyntaxKind.TypeOfExpression : console.log(depth +"-" +"TypeOfExpression: " + node.getText()); break;
			case ts.SyntaxKind.VoidExpression : console.log(depth +"-" +"VoidExpression: " + node.getText()); break;
			case ts.SyntaxKind.AwaitExpression : console.log(depth +"-" +"AwaitExpression: " + node.getText()); break;
			case ts.SyntaxKind.PrefixUnaryExpression : console.log(depth +"-" +"PrefixUnaryExpression: " + node.getText()); break;
			case ts.SyntaxKind.PostfixUnaryExpression : console.log(depth +"-" +"PostfixUnaryExpression: " + node.getText()); break;
			case ts.SyntaxKind.BinaryExpression : console.log(depth +"-" +"BinaryExpression: " + node.getText()); break;
			case ts.SyntaxKind.ConditionalExpression : console.log(depth +"-" +"ConditionalExpression: " + node.getText()); break;
			case ts.SyntaxKind.TemplateExpression : console.log(depth +"-" +"TemplateExpression: " + node.getText()); break;
			case ts.SyntaxKind.YieldExpression : console.log(depth +"-" +"YieldExpression: " + node.getText()); break;
			case ts.SyntaxKind.SpreadElement : console.log(depth +"-" +"SpreadElement: " + node.getText()); break;
			case ts.SyntaxKind.ClassExpression : console.log(depth +"-" +"ClassExpression: " + node.getText()); break;
			case ts.SyntaxKind.OmittedExpression : console.log(depth +"-" +"OmittedExpression: " + node.getText()); break;
			case ts.SyntaxKind.ExpressionWithTypeArguments : console.log(depth +"-" +"ExpressionWithTypeArguments: " + node.getText()); break;
			case ts.SyntaxKind.AsExpression : console.log(depth +"-" +"AsExpression: " + node.getText()); break;
			case ts.SyntaxKind.NonNullExpression : console.log(depth +"-" +"NonNullExpression: " + node.getText()); break;
			case ts.SyntaxKind.MetaProperty : console.log(depth +"-" +"MetaProperty: " + node.getText()); break;
			case ts.SyntaxKind.TemplateSpan : console.log(depth +"-" +"TemplateSpan: " + node.getText()); break;
			case ts.SyntaxKind.SemicolonClassElement : console.log(depth +"-" +"SemicolonClassElement: " + node.getText()); break;
			case ts.SyntaxKind.Block : console.log(depth +"-" +"Block: " + node.getText()); break;
			case ts.SyntaxKind.VariableStatement : console.log(depth +"-" +"VariableStatement: " + node.getText()); break;
			case ts.SyntaxKind.EmptyStatement : console.log(depth +"-" +"EmptyStatement: " + node.getText()); break;
			case ts.SyntaxKind.ExpressionStatement : console.log(depth +"-" +"ExpressionStatement: " + node.getText()); break;
			case ts.SyntaxKind.IfStatement : console.log(depth +"-" +"IfStatement: " + node.getText()); break;
			case ts.SyntaxKind.DoStatement : console.log(depth +"-" +"DoStatement: " + node.getText()); break;
			case ts.SyntaxKind.WhileStatement : console.log(depth +"-" +"WhileStatement: " + node.getText()); break;
			case ts.SyntaxKind.ForStatement : console.log(depth +"-" +"ForStatement: " + node.getText()); break;
			case ts.SyntaxKind.ForInStatement : console.log(depth +"-" +"ForInStatement: " + node.getText()); break;
			case ts.SyntaxKind.ForOfStatement : console.log(depth +"-" +"ForOfStatement: " + node.getText()); break;
			case ts.SyntaxKind.ContinueStatement : console.log(depth +"-" +"ContinueStatement: " + node.getText()); break;
			case ts.SyntaxKind.BreakStatement : console.log(depth +"-" +"BreakStatement: " + node.getText()); break;
			case ts.SyntaxKind.ReturnStatement : console.log(depth +"-" +"ReturnStatement: " + node.getText()); break;
			case ts.SyntaxKind.WithStatement : console.log(depth +"-" +"WithStatement: " + node.getText()); break;
			case ts.SyntaxKind.SwitchStatement : console.log(depth +"-" +"SwitchStatement: " + node.getText()); break;
			case ts.SyntaxKind.LabeledStatement : console.log(depth +"-" +"LabeledStatement: " + node.getText()); break;
			case ts.SyntaxKind.ThrowStatement : console.log(depth +"-" +"ThrowStatement: " + node.getText()); break;
			case ts.SyntaxKind.TryStatement : console.log(depth +"-" +"TryStatement: " + node.getText()); break;
			case ts.SyntaxKind.DebuggerStatement : console.log(depth +"-" +"DebuggerStatement: " + node.getText()); break;
			case ts.SyntaxKind.VariableDeclaration : console.log(depth +"-" +"VariableDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.VariableDeclarationList : console.log(depth +"-" +"VariableDeclarationList: " + node.getText()); break;
			case ts.SyntaxKind.FunctionDeclaration : console.log(depth +"-" +"FunctionDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.ClassDeclaration : console.log(depth +"-" +"ClassDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.InterfaceDeclaration : console.log(depth +"-" +"InterfaceDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.TypeAliasDeclaration : console.log(depth +"-" +"TypeAliasDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.EnumDeclaration : console.log(depth +"-" +"EnumDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.ModuleDeclaration : console.log(depth +"-" +"ModuleDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.ModuleBlock : console.log(depth +"-" +"ModuleBlock: " + node.getText()); break;
			case ts.SyntaxKind.CaseBlock : console.log(depth +"-" +"CaseBlock: " + node.getText()); break;
			case ts.SyntaxKind.NamespaceExportDeclaration : console.log(depth +"-" +"NamespaceExportDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.ImportEqualsDeclaration : console.log(depth +"-" +"ImportEqualsDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.ImportDeclaration : console.log(depth +"-" +"ImportDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.ImportClause : console.log(depth +"-" +"ImportClause: " + node.getText()); break;
			case ts.SyntaxKind.NamespaceImport : console.log(depth +"-" +"NamespaceImport: " + node.getText()); break;
			case ts.SyntaxKind.NamedImports : console.log(depth +"-" +"NamedImports: " + node.getText()); break;
			case ts.SyntaxKind.ImportSpecifier : console.log(depth +"-" +"ImportSpecifier: " + node.getText()); break;
			case ts.SyntaxKind.ExportAssignment : console.log(depth +"-" +"ExportAssignment: " + node.getText()); break;
			case ts.SyntaxKind.ExportDeclaration : console.log(depth +"-" +"ExportDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.NamedExports : console.log(depth +"-" +"NamedExports: " + node.getText()); break;
			case ts.SyntaxKind.ExportSpecifier : console.log(depth +"-" +"ExportSpecifier: " + node.getText()); break;
			case ts.SyntaxKind.MissingDeclaration : console.log(depth +"-" +"MissingDeclaration: " + node.getText()); break;
			case ts.SyntaxKind.ExternalModuleReference : console.log(depth +"-" +"ExternalModuleReference: " + node.getText()); break;
			case ts.SyntaxKind.JsxElement : console.log(depth +"-" +"JsxElement: " + node.getText()); break;
			case ts.SyntaxKind.JsxSelfClosingElement : console.log(depth +"-" +"JsxSelfClosingElement: " + node.getText()); break;
			case ts.SyntaxKind.JsxOpeningElement : console.log(depth +"-" +"JsxOpeningElement: " + node.getText()); break;
			case ts.SyntaxKind.JsxClosingElement : console.log(depth +"-" +"JsxClosingElement: " + node.getText()); break;
			case ts.SyntaxKind.JsxFragment : console.log(depth +"-" +"JsxFragment: " + node.getText()); break;
			case ts.SyntaxKind.JsxOpeningFragment : console.log(depth +"-" +"JsxOpeningFragment: " + node.getText()); break;
			case ts.SyntaxKind.JsxClosingFragment : console.log(depth +"-" +"JsxClosingFragment: " + node.getText()); break;
			case ts.SyntaxKind.JsxAttribute : console.log(depth +"-" +"JsxAttribute: " + node.getText()); break;
			case ts.SyntaxKind.JsxAttributes : console.log(depth +"-" +"JsxAttributes: " + node.getText()); break;
			case ts.SyntaxKind.JsxSpreadAttribute : console.log(depth +"-" +"JsxSpreadAttribute: " + node.getText()); break;
			case ts.SyntaxKind.JsxExpression : console.log(depth +"-" +"JsxExpression: " + node.getText()); break;
			case ts.SyntaxKind.CaseClause : console.log(depth +"-" +"CaseClause: " + node.getText()); break;
			case ts.SyntaxKind.DefaultClause : console.log(depth +"-" +"DefaultClause: " + node.getText()); break;
			case ts.SyntaxKind.HeritageClause : console.log(depth +"-" +"HeritageClause: " + node.getText()); break;
			case ts.SyntaxKind.CatchClause : console.log(depth +"-" +"CatchClause: " + node.getText()); break;
			case ts.SyntaxKind.PropertyAssignment : console.log(depth +"-" +"PropertyAssignment: " + node.getText()); break;
			case ts.SyntaxKind.ShorthandPropertyAssignment : console.log(depth +"-" +"ShorthandPropertyAssignment: " + node.getText()); break;
			case ts.SyntaxKind.SpreadAssignment : console.log(depth +"-" +"SpreadAssignment: " + node.getText()); break;
			case ts.SyntaxKind.EnumMember : console.log(depth +"-" +"EnumMember: " + node.getText()); break;
			case ts.SyntaxKind.SourceFile : console.log(depth +"-" +"SourceFile: " + node.getText()); break;
			case ts.SyntaxKind.Bundle : console.log(depth +"-" +"Bundle: " + node.getText()); break;
			case ts.SyntaxKind.JSDocTypeExpression : console.log(depth +"-" +"JSDocTypeExpression: " + node.getText()); break;
			case ts.SyntaxKind.JSDocAllType : console.log(depth +"-" +"JSDocAllType: " + node.getText()); break;
			case ts.SyntaxKind.JSDocUnknownType : console.log(depth +"-" +"JSDocUnknownType: " + node.getText()); break;
			case ts.SyntaxKind.JSDocNullableType : console.log(depth +"-" +"JSDocNullableType: " + node.getText()); break;
			case ts.SyntaxKind.JSDocNonNullableType : console.log(depth +"-" +"JSDocNonNullableType: " + node.getText()); break;
			case ts.SyntaxKind.JSDocOptionalType : console.log(depth +"-" +"JSDocOptionalType: " + node.getText()); break;
			case ts.SyntaxKind.JSDocFunctionType : console.log(depth +"-" +"JSDocFunctionType: " + node.getText()); break;
			case ts.SyntaxKind.JSDocVariadicType : console.log(depth +"-" +"JSDocVariadicType: " + node.getText()); break;
			case ts.SyntaxKind.JSDocComment : console.log(depth +"-" +"JSDocComment: " + node.getText()); break;
			case ts.SyntaxKind.JSDocTypeLiteral : console.log(depth +"-" +"JSDocTypeLiteral: " + node.getText()); break;
			case ts.SyntaxKind.JSDocTag : console.log(depth +"-" +"JSDocTag: " + node.getText()); break;
			case ts.SyntaxKind.JSDocAugmentsTag : console.log(depth +"-" +"JSDocAugmentsTag: " + node.getText()); break;
			case ts.SyntaxKind.JSDocClassTag : console.log(depth +"-" +"JSDocClassTag: " + node.getText()); break;
			case ts.SyntaxKind.JSDocParameterTag : console.log(depth +"-" +"JSDocParameterTag: " + node.getText()); break;
			case ts.SyntaxKind.JSDocReturnTag : console.log(depth +"-" +"JSDocReturnTag: " + node.getText()); break;
			case ts.SyntaxKind.JSDocTypeTag : console.log(depth +"-" +"JSDocTypeTag: " + node.getText()); break;
			case ts.SyntaxKind.JSDocTemplateTag : console.log(depth +"-" +"JSDocTemplateTag: " + node.getText()); break;
			case ts.SyntaxKind.JSDocTypedefTag : console.log(depth +"-" +"JSDocTypedefTag: " + node.getText()); break;
			case ts.SyntaxKind.JSDocPropertyTag : console.log(depth +"-" +"JSDocPropertyTag: " + node.getText()); break;
			case ts.SyntaxKind.SyntaxList : console.log(depth +"-" +"SyntaxList: " + node.getText()); break;
			case ts.SyntaxKind.NotEmittedStatement : console.log(depth +"-" +"NotEmittedStatement: " + node.getText()); break;
			case ts.SyntaxKind.PartiallyEmittedExpression : console.log(depth +"-" +"PartiallyEmittedExpression: " + node.getText()); break;
			case ts.SyntaxKind.CommaListExpression : console.log(depth +"-" +"CommaListExpression: " + node.getText()); break;
			case ts.SyntaxKind.MergeDeclarationMarker : console.log(depth +"-" +"MergeDeclarationMarker: " + node.getText()); break;
			case ts.SyntaxKind.EndOfDeclarationMarker : console.log(depth +"-" +"EndOfDeclarationMarker: " + node.getText()); break;
			case ts.SyntaxKind.Count : console.log(depth +"-" +"Count: " + node.getText()); break;
			case ts.SyntaxKind.FirstAssignment : console.log(depth +"-" +"FirstAssignment: " + node.getText()); break;
			case ts.SyntaxKind.LastAssignment : console.log(depth +"-" +"LastAssignment: " + node.getText()); break;
			case ts.SyntaxKind.FirstCompoundAssignment : console.log(depth +"-" +"FirstCompoundAssignment: " + node.getText()); break;
			case ts.SyntaxKind.LastCompoundAssignment : console.log(depth +"-" +"LastCompoundAssignment: " + node.getText()); break;
			case ts.SyntaxKind.FirstReservedWord : console.log(depth +"-" +"FirstReservedWord: " + node.getText()); break;
			case ts.SyntaxKind.LastReservedWord : console.log(depth +"-" +"LastReservedWord: " + node.getText()); break;
			case ts.SyntaxKind.FirstKeyword : console.log(depth +"-" +"FirstKeyword: " + node.getText()); break;
			case ts.SyntaxKind.LastKeyword : console.log(depth +"-" +"LastKeyword: " + node.getText()); break;
			case ts.SyntaxKind.FirstFutureReservedWord : console.log(depth +"-" +"FirstFutureReservedWord: " + node.getText()); break;
			case ts.SyntaxKind.LastFutureReservedWord : console.log(depth +"-" +"LastFutureReservedWord: " + node.getText()); break;
			case ts.SyntaxKind.FirstTypeNode : console.log(depth +"-" +"FirstTypeNode: " + node.getText()); break;
			case ts.SyntaxKind.LastTypeNode : console.log(depth +"-" +"LastTypeNode: " + node.getText()); break;
			case ts.SyntaxKind.FirstPunctuation : console.log(depth +"-" +"FirstPunctuation: " + node.getText()); break;
			case ts.SyntaxKind.LastPunctuation : console.log(depth +"-" +"LastPunctuation: " + node.getText()); break;
			case ts.SyntaxKind.FirstToken : console.log(depth +"-" +"FirstToken: " + node.getText()); break;
			case ts.SyntaxKind.LastToken : console.log(depth +"-" +"LastToken: " + node.getText()); break;
			case ts.SyntaxKind.FirstTriviaToken : console.log(depth +"-" +"FirstTriviaToken: " + node.getText()); break;
			case ts.SyntaxKind.LastTriviaToken : console.log(depth +"-" +"LastTriviaToken: " + node.getText()); break;
			case ts.SyntaxKind.FirstLiteralToken : console.log(depth +"-" +"FirstLiteralToken: " + node.getText()); break;
			case ts.SyntaxKind.LastLiteralToken : console.log(depth +"-" +"LastLiteralToken: " + node.getText()); break;
			case ts.SyntaxKind.FirstTemplateToken : console.log(depth +"-" +"FirstTemplateToken: " + node.getText()); break;
			case ts.SyntaxKind.LastTemplateToken : console.log(depth +"-" +"LastTemplateToken: " + node.getText()); break;
			case ts.SyntaxKind.FirstBinaryOperator : console.log(depth +"-" +"FirstBinaryOperator: " + node.getText()); break;
			case ts.SyntaxKind.LastBinaryOperator : console.log(depth +"-" +"LastBinaryOperator: " + node.getText()); break;
			case ts.SyntaxKind.FirstNode : console.log(depth +"-" +"FirstNode: " + node.getText()); break;
			case ts.SyntaxKind.FirstJSDocNode : console.log(depth +"-" +"FirstJSDocNode: " + node.getText()); break;
			case ts.SyntaxKind.LastJSDocNode : console.log(depth +"-" +"LastJSDocNode: " + node.getText()); break;
			case ts.SyntaxKind.FirstJSDocTagNode : console.log(depth +"-" +"FirstJSDocTagNode: " + node.getText()); break;
			case ts.SyntaxKind.LastJSDocTagNode : console.log(depth +"-" +"LastJSDocTagNode: " + node.getText()); break;
			default : console.log(depth +"-" +"Unknown node.kind : " + node.kind); break;
        }

		for ( let i = 0 ; i < node.getChildCount() ; i++ ){
			let child = node.getChildAt(i);
			delintNode(child);
		}
		depth--;
    }
}

const fileNames = process.argv.slice(2);
fileNames.forEach(fileName => {
    // Parse a file
    let sourceFile = ts.createSourceFile(fileName, readFileSync(fileName).toString(), ts.ScriptTarget.ES2015, /*setParentNodes */ true);

    // delint it
	delint(sourceFile);
	

//	createCppCode(sourceFile);

});